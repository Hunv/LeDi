@page "/match/{Id:int}"
@using LeDi.Shared.DtoModel
@using LeDi.Shared.Enum
@using LeDi.WebClient.Components
@inject LeDi.Shared.Api Api
@inject Microsoft.Extensions.Localization.IStringLocalizer<MatchEdit> Localizer

<PageTitle>LeDi - Edit Match</PageTitle>

@if (Match == null)
{
    <p><em>@Localizer["Loading"]</em></p>
}
else
{   
    <EditForm Model="@Match" OnValidSubmit="@SaveMatch">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("txtTeamName1"))">
            <a>@Localizer["Team1Name"]</a>
            <InputText id="txtTeam1Name" type="text" class="form-control" placeholder="Teamname" @bind-Value="Match.Team1Name" />
            <ValidationMessage For="@(() => Match.Team1Name)" />
            <br />
        </div>

        <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("txtTeamName2"))" >
            <a>@Localizer["Team2Name"]</a>
            <InputText id="txtTeam2Name" type="text" class="form-control" placeholder="Teamname" @bind-Value="Match.Team2Name" />
            <ValidationMessage For="@(() => Match.Team2Name)" />
            <br />
        </div>

        <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("txtPeriodCount"))">
            <a>@Localizer["PeriodsCount"]</a>
            <InputNumber id="txtPeriodCount" class="form-control" type="text" @bind-Value="Match.RulePeriodCount" />
            <br />
        </div>
   
        <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("dtScheduledTime"))">
            <a>@Localizer["ScheduledStartTime"]</a>
            @*<input id="txtScheduledTime" class="form-control" width="150" type="time" @bind="Match.ScheduledTime" />*@        
            <input id="txtScheduledTime" type="datetime" class="form-control" @bind-value="Match.ScheduledTime"/>
            <br />
        </div>
                
        <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("cmbMatchStatus"))">
            <a>@Localizer["MatchStatus"]</a>
            <InputSelect @bind-Value="MatchStatus" id="cmbMatchStatus" class="form-control" width="150">
                @foreach (var value in Enum.GetValues(typeof(MatchStatusEnum)))
                {
                    <option>@value</option>
                }
            </InputSelect>
        </div>        
                
        <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("chkPeriodOvertime"))">
            <InputCheckbox 
                id="chkPeriodOvertime" 
                @bind-Value="Match.RulePeriodOvertime" 
                />
            <a>@Localizer["MatchOvertime"]</a>
            <br />
        </div>

        <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("chkPeriodPauseNearEnd"))">
            <InputCheckbox 
                id="chkPeriodPauseNearEnd" 
                @bind-Value="Match.RulePeriodLastPauseTimeOnEvent" 
                />
            <a>@Localizer["MatchPauses"]</a>
            <br />
        </div>

        <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("txtPeriodPauseNearEndSec")|| Match.RulePeriodLastPauseTimeOnEvent == false)">
            <a>@Localizer["NumberOfSeconds"]</a>
            <InputNumber 
                id="txtPeriodPauseNearEndSec" 
                class="form-control" 
                type="text" 
                @bind-Value="@Match.RulePeriodLastPauseTimeOnEventSeconds"
                />
            <br /> 
        </div>

        <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("chkMatchExtensionOnDraw"))">
            <InputCheckbox 
                id="chkMatchExtensionOnDraw" 
                @bind-Value="Match.RuleMatchExtensionOnDraw" 
                />
            <a>@Localizer["ExtendMatch"]</a>
            <br />
        </div>
        
        <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("displaylist"))">
            <br />
            <a>@Localizer["ShowOnDisplay"]</a>
            <br />
            @foreach(var aDisplay in DisplayList)
            {
                var value = aDisplay;
                <input type="checkbox" checked="@aDisplay.Enabled" @onchange="eventArgs => {DisplayClicked(value,(bool)(eventArgs.Value ?? false));}"> @aDisplay.DeviceName
            }  
            <br /><br />
        </div>
        <br />


        <div class="panel">
            <button class="btn btn-primary" @onclick="e => this.EditCollapsed = !this.EditCollapsed">
                <span class="oi @(this.EditCollapsed ? "oi-arrow-circle-bottom" : "oi-arrow-circle-top")" /> @(this.EditCollapsed ? "Show live match properties" : "Hide live match properties")
            </button>

            <div class="panel @(EditCollapsed?"collapse":"")">
                
                <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("txtScoreTeam1"))">
                    <a>@Localizer["Team1Score"]</a>
                    <InputNumber id="txtScoreTeam1" class="form-control" type="text" @bind-Value="Match.Team1Score" />
                    <br />
                </div>

                
                <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("txtScoreTeam2"))">
                    <a>@Localizer["Team2Score"]</a>
                    <InputNumber id="txtScoreTeam2" class="form-control" type="text" @bind-Value="Match.Team2Score" />
                    <br />  
                </div>

                
                <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("txtTimeLeft"))">
                    <label>@Localizer["TimeLeft"]</label>
                    <div class="input-group">
                        <input type="number" class="form-control" style="max-width:100px; min-width:50px" placeholder="Minutes" min="0" max="99999" @bind-value="TimeLeftMinutesProxy"/>
                        <span class="input-group-addon mt-1" style="top:0px;">&nbsp;:&nbsp;</span>
                        <input type="number" class="form-control" style="max-width:100px; min-width:50px" placeholder="Seconds" min="0" max="59" @bind-value="TimeLeftSecondsProxy"/>
                    </div>
                    <br /> 
                </div>

                
                <div hidden="@(!FieldList[Match.Gamename ?? ""].Contains("txtPeriodCount"))">
                    <a>@Localizer["CurrentPeriod"]</a>
                    <InputNumber id="txtPeriodCurrent" class="form-control" type="text" @bind-Value="Match.PeriodCurrent" />
                    <br />
                </div>
            </div>
        </div>
        <br />
        <button class="btn btn-primary" type="submit">Save Match</button>
        <a class="btn btn-danger" href="matchplanning" role="button">Cancel</a>
    </EditForm>
}

@code {
    private readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();
    private DtoMatch? Match = null;
    private bool EditCollapsed = true;
    List<DtoDevice>DisplayList = new List<DtoDevice>(); //The list of devices

    [Parameter]
    public int? Id { get; set; }

    //Dictionary that defines the fields that are shown when SelectedGamename has the value of that match type.
    public Dictionary<string, List<string>> FieldList = new Dictionary<string, List<string>>
    {
        {
            "", new List<string>
            {

            }
        },
        {
            "Underwaterhockey", new List<string>
            {
                "displaylist",
                "txtTeamName1", 
                "txtTeamName2",
                "txtScoreTeam1",
                "txtScoreTeam2",
                "txtPeriodCount", 
                "txtTimeLeft",
                "dtScheduledTime",
                "chkPeriodPauseNearEnd",
                "txtPeriodPauseNearEndSec",
                "chkMatchExtensionOnDraw"
            }
        },
        {
            "Handball", new List<string>
            {
                "displaylist",
                "txtTeamName1", 
                "txtTeamName2",
                "txtScoreTeam1",
                "txtScoreTeam2",
                "txtPeriodCount", 
                "txtTimeLeft",
                "dtScheduledTime",
                "chkMatchExtensionOnDraw"
            }
        },
        {
            "Soccer", new List<string>
            {
                "displaylist",
                "txtTeamName1", 
                "txtTeamName2",
                "txtScoreTeam1",
                "txtScoreTeam2",
                "txtPeriodCount", 
                "txtTimeLeft",
                "dtScheduledTime",
                "chkPeriodOvertime",
                "chkMatchExtensionOnDraw"
            }
        },
        {
            "Other", new List<string>
            {
                "displaylist",
                "txtTeamName1", 
                "txtTeamName2",
                "txtPeriodCount", 
                "txtTimeLeft",
                "dtScheduledTime",
                "chkPeriodOvertime",
                "chkPeriodPauseNearEnd",
                "txtPeriodPauseNearEndSec",
                "chkMatchExtensionOnDraw"
            }
        },
    };

    private MatchStatusEnum MatchStatus
    {
        get
        { 
            return (Match == null || !Match.MatchStatus.HasValue) ? MatchStatusEnum.Undefined : (MatchStatusEnum)Match.MatchStatus.Value;
        }
        set 
        {
            if (Match == null) 
                return;

            Match.MatchStatus = (int)value;
        }
    }

    private int TimeLeftMinutesProxy
    {
        get
        {
            if (Match == null)
                return 0;

            return (int)((Match.TimeLeftSeconds ?? 0) / 60);
        }
        set
        {
            if (Match == null)
                return;

            Match.TimeLeftSeconds = value * 60 + TimeLeftSecondsProxy;
        }
    }

    private int TimeLeftSecondsProxy
    {
        get
        {
            if (Match == null)
                return 0;

            return (int)((Match.TimeLeftSeconds ?? 0) % 60);
        }
        set
        {
            if (Match == null)
                return;

            Match.TimeLeftSeconds = TimeLeftMinutesProxy + value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            Logger.Warn("Cannot load match. No Id given.");
            return;
        }

        Match = await Api.GetMatchFullAsync(Id.Value);

        if (Match == null)
        {
            Logger.Warn("Cannot load Match ID {0}", Id.Value);
            return;
        }

        DisplayList = await Api.GetDeviceAsync() ?? new List<DtoDevice>();
        DisplayList = DisplayList.Where(x => x.Enabled).ToList();
        foreach(var aDev in DisplayList)
        {
            if (!Match.DeviceIds.Contains(aDev.DeviceId))
            {
                aDev.Enabled = false; //After loading enabled reflects the selection state of the device
            }
        }

        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void SaveMatch()
    {   
        if (Match == null)
        {
            Logger.Warn("Cannot save match. It is null.");
            return;
        }

        Logger.Debug("Saving match...");

        await Api.SetMatchAsync(Match);
    }

    /// <summary>
    /// Executed when a device in the device list is (un)checked
    /// </summary>
    /// <param name="device"></param>
    /// <param name="isChecked"></param>
    private void DisplayClicked(DtoDevice device, bool isChecked)
    {
        if (Match == null)
        {
            Logger.Warn("Cannot change devices. Match is null.");
            return;
        }

        // The enabled property is not saved back to the server. So it is used here to save the check state
        DisplayList.Single(x => x.DeviceId == device.DeviceId).Enabled = isChecked;

        // Add the device to the match object
        if (isChecked)
            Match.DeviceIds.Add(device.DeviceId);
        else
            Match.DeviceIds.Remove(device.DeviceId);

    }
}
