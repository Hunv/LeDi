@page "/settings"
@using LeDi.Shared.DtoModel;
@using LeDi.WebClient.Data
@inject LeDi.Shared.Api Api
@inject IJSRuntime JSRuntime

<PageTitle>LeDi - Settings</PageTitle>


<h1>Settings</h1>

<a href="administration">User administration</a>
<br />

@if (SettingList == null)
{
    <p><em>Loading Settinglist...</em></p>
}
else
{
    <p>The following settings are configured:</p>
    <EditForm Model="@SettingList" OnValidSubmit="@SaveSettings">
        @*<DataAnnotationsValidator />
        <ValidationSummary />*@

        <table class="table">
            <thead>
                <tr>
                    <th>Setting</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var aSetting in SettingList)
                {
                    <tr>
                        <td>
                            <InputText id="txtSetting@aSetting.Name" type="text" class="form-control" @bind-Value="@aSetting.Name" />                        
                            @*<ValidationMessage For="@(() => aSetting.Name)" />*@
                        </td>
                        <td>
                            <InputText id="txtSetting@aSetting.Value" type="text" class="form-control" @bind-Value="@aSetting.Value" />                        
                            @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                        </td>
                    </tr>
                }      
            </tbody>
        </table>    
        
        <button class="btn btn-primary" type="submit">Save Changes</button>
    </EditForm>
}
<br /><br />
<h1>Devices</h1>

@if (DeviceList == null)
{
    <p><em>Loading Devicelist...</em></p>
}
else
{
    <p>The following devices are known:</p>

    <table class="table">
        <thead>
            <tr>
                <th>Device ID</th>
                <th>Device Model</th>
                <th>Device Type</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var aDevice in DeviceList)
            {
                <tr>
                    <td><p>@aDevice.DeviceId</p></td>
                    <td><p>@aDevice.DeviceModel</p></td>
                    <td><p>@aDevice.DeviceType</p></td>
                    <td><a href="/SettingsDevice/@aDevice.DeviceId" class="text-decoration-none">🔧</a></td>
                    <td><a href="/SettingsDeviceDelete/@aDevice.DeviceId" class="text-decoration-none">🗑</a></td>
                </tr>
            }      
        </tbody>
    </table>    
}

@code {
    private readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();
    private List<DtoSetting>? SettingList;
    private List<DtoDevice>? DeviceList;

    protected override async Task OnInitializedAsync()
    {
        SettingList = await Api.GetSettingAsync();
        DeviceList = await Api.GetDeviceAsync();
    }

    private async void SaveSettings()
    {
        Logger.Trace("Saving settings...");

        if (SettingList == null) 
        {
            Logger.Warn("No settings to save.");
            await JSRuntime.InvokeVoidAsync("alert", "No Settings to save.");
            return;
        }

        // Get the current serversettings to check which settings changed
        var currentServerSettings = await Api.GetSettingAsync();
        if (currentServerSettings == null)
        {
            Logger.Warn("Cannot get current settings from server.");
            await JSRuntime.InvokeVoidAsync("alert", "Cannot get current settings from server.");
            return;
        }

        // Update all changed settings
        foreach(var aServerSet in currentServerSettings)
        {
            var locSet = SettingList.SingleOrDefault(x => x.Name == aServerSet.Name);
            
            if (locSet == null)
                continue;

            if (locSet.Value != aServerSet.Value)
            {
                await Api.SetSettingAsync(locSet);
            }
        }

        //Reload Device settings
        SettingList = await Api.GetSettingAsync();
        await InvokeAsync(() => { StateHasChanged(); });
    }
}
