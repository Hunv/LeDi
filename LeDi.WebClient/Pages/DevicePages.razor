@page "/devicepages"
@using LeDi.Shared.DtoModel
@using LeDi.Shared.Enum
@inject LeDi.Shared.Api Api
@inject Microsoft.Extensions.Localization.IStringLocalizer<DevicePages> Localizer

<PageTitle>LeDi - @Localizer["PageTitle"]</PageTitle>

@if (DeviceList == null)
{
    <p><em>@Localizer["Loading"]</em></p>
}
else
{
    <EditForm Model="@SelectedDevice" OnValidSubmit="@ShowPage">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>@Localizer["SelectDevice"]</p>
        <InputSelect class="form-control" @bind-Value="SelectedDevice">
            @foreach(var aDevice in DeviceList)
            {
                var dev = aDevice;
                <option value="@dev.DeviceId">@dev.DeviceName</option>
            }    
        </InputSelect>
        <br /><br />

        <p>@Localizer["SelectPage"]</p>
        <InputSelect class="form-control" @bind-Value="SelectedPage" @onselectionchange="SelectedPageChanged">
            <option value=""></option>
            <option value="match">@Localizer["Match"]</option>
            <option value="tournament">@Localizer["Tournament"]</option>
            <option value="countdown">@Localizer["Countdown"]</option>
            <option value="text">@Localizer["Text"]</option>
        </InputSelect>
    
        <br /><br />

        <div hidden="@(!(SelectedPage == ""))">
        </div>

        <div hidden="@(!(SelectedPage == "match"))">
            <p>@Localizer["SelectMatch"]</p>
            <p>@Localizer["SelectMatch2"]</p>
            @if(MatchList == null || MatchList.Count == 0)
            {
                <p><em>@Localizer["NoMatches"]</em></p>
            }
            else
            {
                <InputSelect class="form-control" @bind-Value="SelectedMatchId">
                    @foreach(var aMatch in MatchList)
                    {
                        <option value="@aMatch.Id">@aMatch.Team1Name - @aMatch.Team2Name (@aMatch.Team1Score:@aMatch.Team2Score)</option>
                    }
                </InputSelect>
            }
        </div>

        <div hidden="@(!(SelectedPage == "tournament"))">
            <p>@Localizer["TournamentText"]</p>
        </div>

        <div hidden="@(!(SelectedPage == "countdown"))">
            <p>@Localizer["CountdownText"]</p>

            <p>@Localizer["CountdownText2"]</p>
            <InputText class="form-control" @bind-Value="CountdownText"/>

            <p>@Localizer["CountdownSeconds"]</p>
            <input 
                type="number" 
                class="form-control"
               placeholder="@Localizer["Seconds"]"
               min="0" 
                max="99999" 
                @bind-value="CountdownSeconds"
                />
        </div>

        <div hidden="@(!(SelectedPage == "text"))">
            <p>@Localizer["TextText"]</p>
            <InputTextArea class="form-control" @bind-Value="TextContent"/>
        </div>

        <button class="btn btn-primary" type="submit">Show Page</button>
    </EditForm>
}

@code {
    private List<DtoDevice>? DeviceList = null;
    private string SelectedDevice = "";
    private List<DtoMatch> MatchList = new List<DtoMatch>();
    private DtoMatch SelectedMatch = new DtoMatch();
    private string CountdownText = "";
    private int CountdownSeconds = 0;
    private string TextContent = "";

    private string _SelectedPage = "";
    private string SelectedPage {
        get
        {
            return _SelectedPage;
        }
        set
        {
            _SelectedPage = value;
            #pragma warning disable CS4014
            SelectedPageChanged();
            #pragma warning restore CS4014
        }
    }

    private int SelectedMatchId
    {
        get
        {
            return SelectedMatch.Id;
        }
        set
        {
            SelectedMatch = MatchList.Single(x => x.Id == value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        DeviceList = (await Api.GetDeviceAsync()) ?? new List<DtoDevice>() ;
    }

    private async Task SelectedPageChanged()
    {
        switch (SelectedPage)
        {
            case "match":
                MatchList = (await Api.GetMatchListAsync()).Where(x => x.MatchStatus != (int)MatchStatusEnum.Canceled && x.MatchStatus != (int)MatchStatusEnum.Closed && x.MatchStatus != (int)MatchStatusEnum.Ended && x.MatchStatus != (int)MatchStatusEnum.Stopped).ToList();
                break;
        }

        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async Task ShowPage()
    {   
        switch (SelectedPage)
        {
            case "":
                await Api.SetDeviceSettingAsync(SelectedDevice, new DtoDeviceSetting(SelectedDevice, "mode", "none"));
                break;
            case "match":
                await Api.SetDeviceSettingAsync(SelectedDevice, new DtoDeviceSetting(SelectedDevice, "mode", "match"));
                break;
            case "tournament":
                await Api.SetDeviceSettingAsync(SelectedDevice, new DtoDeviceSetting(SelectedDevice, "mode", "tournament"));
                break;
            case "countdown":
                await Api.SetDeviceCommand(SelectedDevice, "showcountdown", CountdownSeconds.ToString());
                break;
            case "text":
                await Api.SetDeviceCommand(SelectedDevice, "showtext", TextContent);
                break;
        }
    }
}
