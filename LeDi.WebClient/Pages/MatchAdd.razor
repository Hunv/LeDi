@page "/matchadd"
@using LeDi.Shared.DtoModel
@inject LeDi.Shared.Api Api
@inject NavigationManager NavigationManager
@inject Microsoft.Extensions.Localization.IStringLocalizer<MatchAdd> Localizer

<PageTitle>LeDi - New match</PageTitle>
@if (NewMatch == null)
{
    <p><em>Loading Data...</em></p>
}
else
{
    <EditForm Model="@NewMatch" OnValidSubmit="@SaveMatch">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <a>Select type of sport</a>
        <InputSelect id="cmbGamename" class="form-control" @bind-Value="SelectedGamename">
            <option value=""> </option>
            <option value="Underwaterhockey">Underwaterhockey</option>
            <option value="Handball">Handball</option>
            <option value="Soccer">Soccer</option>
@*            <option value="Baseball">Baseball</option>
            <option value="Hockey">Hockey</option>
            <option value="Football">Football</option>
            <option value="Basketball">Basketball</option>
            <option value="Tennis">Tennis</option>*@
            <option value="Other">Other</option>
        </InputSelect>
        <br /> 

        <div hidden="@(!FieldList[SelectedGamename].Contains("displaylist"))">
            <a>Show on display:</a>
            <br />
            @foreach(var aDisplay in DisplayList)
            {
                var value = aDisplay;
                <input type="checkbox" checked="@aDisplay.Enabled" @onchange="eventArgs => {DisplayClicked(value,(bool)(eventArgs.Value ?? false));}"> @aDisplay.DeviceName
            }  
            <br /><br />
        </div>

        <div hidden="@(!FieldList[SelectedGamename].Contains("txtTeamName1"))">
            <a>Team 1</a>
            <InputText 
                id="txtTeamName1" 
                class="form-control" 
                type="text" 
                @bind-Value="@NewMatch.Team1Name"
                />
            <br /> 
        </div>

        <div hidden="@(!FieldList[SelectedGamename].Contains("txtTeamName2"))" >
            <a>Team 2</a>
            <InputText 
                id="txtTeamName2" 
                class="form-control" 
                type="text" 
                @bind-Value="@NewMatch.Team2Name"
                />
            <br/> 
        </div>

        <div hidden="@(!FieldList[SelectedGamename].Contains("txtPeriodCount"))">
            <a>Number of periods</a>
            <InputNumber 
                id="txtPeriodCount" 
                class="form-control" 
                type="text" 
                min="1"
                @bind-Value="@NewMatch.RulePeriodCount"
                />
            <br/> 
        </div>

        <div hidden="@(!FieldList[SelectedGamename].Contains("txtPeriodLength"))">
            <a>Length of a period (minutes : seconds)</a>
            <div id="txtPeriodLength" class="input-group">
                <input 
                    id="txtPeriodLengthMin" 
                    type="number" 
                    class="form-control" 
                    style="max-width:100px; min-width:50px" 
                    placeholder="Minutes" 
                    min="0" 
                    max="99999" 
                    @bind-value="TimeLeftMinutesProxy"
                    />
                <span class="input-group-addon mt-1" style="top:0px;">&nbsp;:&nbsp;</span>
                <input 
                    id="txtPeriodLengthSec" 
                    type="number" 
                    class="form-control" 
                    style="max-width:100px; min-width:50px" 
                    placeholder="Seconds" 
                    min="0" 
                    max="59" 
                    @bind-value="TimeLeftSecondsProxy"
                    />
            </div>
            <br />
        </div>
   
        <div hidden="@(!FieldList[SelectedGamename].Contains("dtScheduledTime"))">
            <a>Scheduled Start Date and Time</a>
            <input 
                id="dtScheduledTime" 
                type="datetime" 
                class="form-control" 
                @bind-value="NewMatch.ScheduledTime"
                />
            <br /> 
        </div>
                
        <div hidden="@(!FieldList[SelectedGamename].Contains("chkPeriodOvertime"))">
            <InputCheckbox 
                id="chkPeriodOvertime" 
                @bind-Value="NewMatch.RulePeriodOvertime" 
                />
            <a>Match has overtime</a>
            <br />
        </div>

        <div hidden="@(!FieldList[SelectedGamename].Contains("chkPeriodPauseNearEnd"))">
            <InputCheckbox 
                id="chkPeriodPauseNearEnd" 
                @bind-Value="NewMatch.RulePeriodLastPauseTimeOnEvent" 
                />
            <a>Match pauses in case of interruptions near end of match</a>
            <br /><br />
        </div>

        <div hidden="@(!FieldList[SelectedGamename].Contains("txtPeriodPauseNearEndSec")|| NewMatch.RulePeriodLastPauseTimeOnEvent == false)">
            <a>Number of seconds near end the time will be stopped?</a>
            <InputNumber 
                id="txtPeriodPauseNearEndSec" 
                class="form-control" 
                type="text" 
                @bind-Value="@NewMatch.RulePeriodLastPauseTimeOnEventSeconds"
                />
            <br /> 
        </div>

        <div hidden="@(!FieldList[SelectedGamename].Contains("chkMatchExtensionOnDraw"))">
            <InputCheckbox 
                id="chkMatchExtensionOnDraw" 
                @bind-Value="NewMatch.RuleMatchExtensionOnDraw" 
                />
            <a>Extend match in case of draw after regular play time</a>
            <br />
        </div>

        <button class="btn btn-primary" type="button" @onclick="@SaveStartMatch">Save and Start</button>
        <button class="btn btn-primary" type="submit">Save</button>

    
    </EditForm>
}

@code{
    private readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();
    private int SelectedDisplay { get; set; }
    private List<DtoDevice> DisplayList { get; set; } = new List<DtoDevice>();

    DtoMatch NewMatch = new DtoMatch()
        {
            Gamename = "",
            Team1Name = "Team1",
            Team2Name = "Team2",
            RulePeriodCount = 2,
            TimeLeftSeconds = 600,
            ScheduledTime = DateTime.Now,
            MatchStatus = (int)LeDi.Shared.Enum.MatchStatusEnum.Planned
    };


    public string SelectedGamename 
    {
        get 
        {
            return NewMatch.Gamename ?? ""; 
        } 
        set 
        {
            NewMatch.Gamename = value;
            #pragma warning disable CS4014
            SelectedGamenameChanged();
            #pragma warning restore CS4014
        }
    }


    /// <summary>
    /// Represents the full minutes left of the NewMatch-Object
    /// </summary>
    private int TimeLeftMinutesProxy
    {
        get
        {
            if (NewMatch == null)
                return 0;

            return (int)((NewMatch.TimeLeftSeconds ?? 0) / 60);
        }
        set
        {
            if (NewMatch == null)
                return;

            NewMatch.TimeLeftSeconds = value * 60 + TimeLeftSecondsProxy;
            NewMatch.RulePeriodLength = NewMatch.TimeLeftSeconds;
        }
    }

    /// <summary>
    /// Represents the seconds only left of the NewMatch-Object
    /// </summary>
    private int TimeLeftSecondsProxy
    {
        get
        {
            if (NewMatch == null)
                return 0;

            return (int)((NewMatch.TimeLeftSeconds ?? 0) % 60);
        }
        set
        {
            if (NewMatch == null)
                return;

            NewMatch.TimeLeftSeconds = TimeLeftMinutesProxy + value;
            NewMatch.RulePeriodLength = NewMatch.TimeLeftSeconds;
        }
    }

    //Dictionary that defines the fields that are shown when SelectedGamename has the value of that match type.
    public Dictionary<string, List<string>> FieldList = new Dictionary<string, List<string>>
    {
        {
            "", new List<string>
            {

            }
        },
        {
            "Underwaterhockey", new List<string>
            {
                "displaylist",
                "txtTeamName1", 
                "txtTeamName2",
                "txtPeriodCount", 
                "txtPeriodLength",
                "dtScheduledTime",
                "chkPeriodPauseNearEnd",
                "txtPeriodPauseNearEndSec",
                "chkMatchExtensionOnDraw"
            }
        },
        {
            "Handball", new List<string>
            {
                "displaylist",
                "txtTeamName1", 
                "txtTeamName2",
                "txtPeriodCount", 
                "txtPeriodLength",
                "dtScheduledTime",
                "chkMatchExtensionOnDraw"
            }
        },
        {
            "Soccer", new List<string>
            {
                "displaylist",
                "txtTeamName1", 
                "txtTeamName2",
                "txtPeriodCount", 
                "txtPeriodLength",
                "dtScheduledTime",
                "chkPeriodOvertime",
                "chkMatchExtensionOnDraw"
            }
        },
        {
            "Other", new List<string>
            {
                "displaylist",
                "txtTeamName1", 
                "txtTeamName2",
                "txtPeriodCount", 
                "txtPeriodLength",
                "dtScheduledTime",
                "chkPeriodOvertime",
                "chkPeriodPauseNearEnd",
                "txtPeriodPauseNearEndSec",
                "chkMatchExtensionOnDraw"
            }
        },
    };

    // Executed when the selected game name changed
    private async Task SelectedGamenameChanged()
    {
        Logger.Debug("Gamename changed to \"{0}\"", SelectedGamename);
        //NewMatch.GameName = SelectedGamename;

        if (SelectedGamename == "")
            return;

        //get the standard rules
        var rules = await Api.GetRulesAsync();

        if (rules == null || rules.Rules == null)
            return;

        //get the standard rules for that game
        var matchRules = rules.Rules.SingleOrDefault(x => x.Gamename == SelectedGamename);

        if (matchRules == null)
            return;

        //apply the standardrules to the new match
        NewMatch = new DtoMatch(){
                Gamename = SelectedGamename,
                Team1Name = "Team1",
                Team2Name = "Team2",
                MatchStatus = (int)LeDi.Shared.Enum.MatchStatusEnum.Planned,
                ScheduledTime = DateTime.Now
        };
        NewMatch.RulePeriodCount = matchRules.RulePeriodCount ?? 2;
        NewMatch.RulePeriodLastPauseTimeOnEvent = matchRules.RulePeriodLastPauseTimeOnEvent;
        NewMatch.RulePeriodLastPauseTimeOnEventSeconds = matchRules.RulePeriodLastPauseTimeOnEventSeconds ?? 0;
        NewMatch.RulePeriodLength = matchRules.RulePeriodLength;
        NewMatch.RulePeriodOvertime = matchRules.RulePeriodOvertime;
        NewMatch.RuleMatchExtensionOnDraw = matchRules.RuleMatchExtensionOnDraw;
        NewMatch.RulePenaltyList = matchRules.RulePenaltyList;

        // Set Default values based on rules
        NewMatch.RulePeriodCount = NewMatch.RulePeriodCount ?? 2; //Note: RulePeriodCount cannot be null here because it is already set to 2 in case it is null above
        NewMatch.TimeLeftSeconds = NewMatch.RulePeriodLength ?? 600;

        // Set the selected displays to the match
        foreach(var aDisplay in DisplayList) {
            if (aDisplay.Default)
                NewMatch.DeviceIds.Add(aDisplay.DeviceId);
        }


        await InvokeAsync(() => { StateHasChanged(); });
    }

    /// <summary>
    /// Exectued if the "Save"-Button is clicked or if called by other methods like SaveStartMatch()
    /// </summary>
    /// <returns>The DTO object of the new Match</returns>
    private async Task<DtoMatch?> SaveMatch()
    {
        // Save and get the saved match as return value
        var newMatch = await Api.NewMatchAsync(NewMatch);

        // Reset the NewMatch variable, that represents the current configuration of the match-to-add. Values are not required anymore after command before was executed.
        NewMatch = new DtoMatch()
            {
                Gamename = "",
                Team1Name = "Team1",
                Team2Name = "Team2",
                TimeLeftSeconds = 10,
                RulePeriodCount = 2,
                ScheduledTime = DateTime.Now
            };
        return newMatch;
    }

    /// <summary>
    /// Executed if the "Save and Start"-Button is clicked
    /// </summary>
    private async void SaveStartMatch()
    {
        var newMatch = await SaveMatch();

        if (newMatch == null)
            NavigationManager.NavigateTo("/matchcontrol");
        else
        {
            await Api.SetMatchStatusAsync(newMatch.Id, LeDi.Shared.Enum.MatchStatusEnum.ReadyToStart);            
            NavigationManager.NavigateTo("/matchcontrol/" + newMatch.Id);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        Logger.Trace("Initializing the page");

        DisplayList = await Api.GetDeviceAsync() ?? new List<DtoDevice>();
        DisplayList = DisplayList.Where(x => x.Enabled).ToList();

        await InvokeAsync(() => { StateHasChanged(); });
    }

    /// <summary>
    /// Executed when a device in the device list is (un)checked
    /// </summary>
    /// <param name="device"></param>
    /// <param name="isChecked"></param>
    private void DisplayClicked(DtoDevice device, bool isChecked)
    {
        // The enabled property is not saved back to the server. So it is used here to save the check state
        DisplayList.Single(x => x.DeviceId == device.DeviceId).Enabled = isChecked;

        // Add the device to the match object
        if (isChecked)
            NewMatch.DeviceIds.Add(device.DeviceId);
        else
            NewMatch.DeviceIds.Remove(device.DeviceId);

    }
}