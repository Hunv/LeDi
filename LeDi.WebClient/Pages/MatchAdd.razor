@page "/matchadd"
@using LeDi.Shared.DtoModel
@inject LeDi.Shared.Api Api
@inject NavigationManager NavigationManager

<PageTitle>LeDi - New match</PageTitle>
@if (NewMatch == null)
{
    <p><em>Loading Data...</em></p>
}
else
{
    <EditForm Model="@NewMatch" OnValidSubmit="@SaveMatch">
    @*    <DataAnnotationsValidator />
        <ValidationSummary />*@

        <a>Select type of sport</a>
        <InputSelect id="cmbGamename" @bind-Value="SelectedGamename" class="form-control">
            <option value="">  </option>
            <option value="UWH">Underwaterhockey</option>
            <option value="Handball">Handball</option>
        </InputSelect>
        <br /> 

        <a hidden="@Hidden">Team 1</a>
        <InputText id="txtTeamName1" class="form-control" type="text" hidden="@Hidden" @bind-Value="@NewMatch.Team1Name"/>
        <br /> 

        <a hidden="@Hidden">Teams 2</a>
        <InputText id="txtTeamName2" class="form-control" type="text" hidden="@Hidden" @bind-Value="@NewMatch.Team2Name"/>
        <br /> 

        <a hidden="@Hidden">Number of halftimes</a>
        <InputNumber id="txtHalfTimeCount" class="form-control" type="text" hidden="@Hidden" @bind-Value="@NewMatch.HalfTimeCount"/>
        <br /> 

        <a hidden="@Hidden">Length of a halftime (minutes : seconds)</a>
        <div class="input-group" hidden="@Hidden">
            <input type="number" class="form-control" style="max-width:100px; min-width:50px" placeholder="Minutes" min="0" max="99999" @bind-value="TimeLeftMinutesProxy"/>
            <span class="input-group-addon mt-1" style="top:0px;">&nbsp;:&nbsp;</span>
            <input type="number" class="form-control" style="max-width:100px; min-width:50px" placeholder="Seconds" min="0" max="59" @bind-value="TimeLeftSecondsProxy"/>
        </div>
        <br />
   
        <a hidden="@Hidden">Scheduled Start Date and Time</a>
        @*<InputDate id="txtScheduledTime" class="form-control" hidden="@Hidden" @bind-Value="@NewMatch.ScheduledTime"/>*@
        <input hidden="@Hidden" type="datetime" class="form-control" @bind-value="NewMatch.ScheduledTime"/>
        <br /> 

        <button class="btn btn-primary" type="button" @onclick="@SaveStartMatch">Save and Start</button>
        <button class="btn btn-primary" type="submit">Save</button>

    
    </EditForm>
}

@code{

    bool Hidden = true;
    DtoMatch NewMatch = new DtoMatch()
        {
            Team1Name = "Team1",
            Team2Name = "Team2",
            HalfTimeCount = 2,
            TimeLeftSeconds = 600,
            ScheduledTime = DateTime.Now,
            MatchStatus = (int)LeDi.Shared.Enum.MatchStatusEnum.Planned
    };

    private string _SelectedGamename = "";
    string SelectedGamename {
        get
        {
            return _SelectedGamename;
        } 
        set
        {
            _SelectedGamename = value;
            ShowFields();
        }
    }


    /// <summary>
    /// Represents the full minutes left of the NewMatch-Object
    /// </summary>
    private int TimeLeftMinutesProxy
    {
        get
        {
            if (NewMatch == null)
                return 0;

            return (int)(NewMatch.TimeLeftSeconds / 60);
        }
        set
        {
            if (NewMatch == null)
                return;
            
            NewMatch.TimeLeftSeconds = value * 60 + TimeLeftSecondsProxy;
        }
    }

    /// <summary>
    /// Represents the seconds only left of the NewMatch-Object
    /// </summary>
    private int TimeLeftSecondsProxy
    {
        get
        {
            if (NewMatch == null)
                return 0;

            return (int)(NewMatch.TimeLeftSeconds % 60);
        }
        set
        {
            if (NewMatch == null)
                return;
            
            NewMatch.TimeLeftSeconds = TimeLeftMinutesProxy + value;
        }
    }



    private void ShowFields()
    {
        if (string.IsNullOrWhiteSpace(SelectedGamename))
        {
            return;
        }
        else if (SelectedGamename == "UWH")
        {
            Hidden = false;
        }
        else
        {
            Hidden = true;
        }


    }
    
    private async void SaveMatch()
    {

        NewMatch.TimeLeftSeconds = NewMatch.TimeLeftSeconds*60;

        await Api.AddMatchAsync(NewMatch);
        NewMatch = new DtoMatch()
            {
                Team1Name = "Team1",
                Team2Name = "Team2",
                TimeLeftSeconds = 10,
                HalfTimeCount = 2
            };
    }
    
    private void SaveStartMatch()
    {
        SaveMatch();
        NavigationManager.NavigateTo("/MatchControl");

    }

}