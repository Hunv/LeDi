@page "/settingsdevice/{id}"
@using LeDi.Shared.DtoModel;
@using LeDi.WebClient.Data
@inject LeDi.Shared.Api Api
@inject IJSRuntime JSRuntime
@inject Microsoft.Extensions.Localization.IStringLocalizer<MatchAdd> Localizer

<PageTitle>LeDi - @Localizer["DeviceSettings"]</PageTitle>


<h1>@Localizer["DeviceSettings"]</h1>

@if (DeviceSettingList == null || Device == null)
{
    <p><em>@Localizer["LoadingDeviceSettings"]</em></p>
}
else
{
    <p>@Localizer["PropertiesSetForDevice"]@Device.DeviceName (@Id):</p>
    <EditForm Model="@Device" OnValidSubmit="@SaveProperties">
        @*<DataAnnotationsValidator />
        <ValidationSummary />*@

        <table class="table">
            <thead>
                <tr>
                    <th>@Localizer["Property"]</th>
                    <th>@Localizer["Value"]</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <a>@Localizer["DeviceName"]</a>
                    </td>
                    <td>
                        <InputText type="text" class="form-control" @bind-Value="Device.DeviceName" />                        
                        @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                    </td>
                </tr>
                <tr>
                    <td>
                        <a>@Localizer["DeviceModel"]</a>
                    </td>
                    <td>
                        <InputText type="text" class="form-control" @bind-Value="Device.DeviceModel" />                        
                        @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                    </td>
                </tr>
                <tr>
                    <td>
                        <a>@Localizer["DeviceType"]</a>
                    </td>
                    <td>
                        <InputText type="text" class="form-control" @bind-Value="Device.DeviceType" />                        
                        @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                    </td>
                </tr>
                <tr>
                    <td>
                        <a>@Localizer["Enabled"]</a>
                    </td>
                    <td>
                        <InputCheckbox @bind-Value="Device.Enabled" />                        
                        @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                    </td>
                </tr>
                <tr>
                    <td>
                        <a>@Localizer["Default"]</a>
                    </td>
                    <td>
                        <InputCheckbox @bind-Value="Device.Default" />                        
                        @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                    </td>
                </tr>
            </tbody>
        </table>

        <button class="btn btn-primary" type="submit">@Localizer["SaveProperties"]</button>
    </EditForm>
    <br /><br />

    <p>@Localizer["SettingsConfiguredForDevice"]@Device.DeviceName (@Id):</p>
    <EditForm Model="@DeviceSettingList" OnValidSubmit="@SaveSettings">
        @*<DataAnnotationsValidator />
        <ValidationSummary />*@

        <table class="table">
            <thead>
                <tr>
                    <th>@Localizer["Setting"]</th>
                    <th>@Localizer["Value"]</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach(var aSetting in DeviceSettingList)
                {
                    <tr>
                        <td>
                            <a>@aSetting.Name</a>
                            @*<InputText id="txtSetting@aSetting.Name" type="text" class="form-control" @bind-Value="@aSetting.Name" />*@
                            @*<ValidationMessage For="@(() => aSetting.Name)" />*@
                        </td>
                        <td>
                            <InputText type="text" class="form-control" @bind-Value="@aSetting.Value" />                        
                            @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                        </td>
                        <td>
                            <a href="/SettingsDeviceSettingDelete/@Id/@aSetting.Name" class="text-decoration-none">🗑</a>
                        </td>
                    </tr>
                }      
            </tbody>
        </table>    
        
        <button class="btn btn-primary" type="submit">Save Settings</button>
    </EditForm>
    <br /><br />
    <h3>@Localizer["AddNewSetting"]</h3>
    <EditForm Model="@NewSetting" OnValidSubmit="@SaveNewSetting">
        @*<DataAnnotationsValidator />
        <ValidationSummary />*@

        <a>@Localizer["SettingName"]</a>
        <InputText id="txtNewSettingName" type="text" class="form-control" @bind-Value="@NewSetting.Name" />
        @*<ValidationMessage For="@(() => aSetting.Name)" />*@
        <br />

        <a>@Localizer["SettingValue"]</a>
        <InputText id="txtNewSettingValue" type="text" class="form-control" @bind-Value="@NewSetting.Value" />
        @*<ValidationMessage For="@(() => aSetting.Value)" />*@
        <br />
        
        <button class="btn btn-primary" type="submit">Add Setting</button>
    </EditForm>
    <br /><br />
    <h3>@Localizer["SendCommandDevice"]</h3>
    <EditForm Model="@selectedDeviceCommand" OnValidSubmit="@ExecuteDeviceCommand">
        <InputSelect @bind-Value="selectedDeviceCommand" class="form-control">
            <option value="showareas">@Localizer["ShowAreas"]</option>
            <option value="showtestpattern">@Localizer["ShowTestpattern"]</option>
            <option value="showcolortest">@Localizer["ShowColortest"]</option>
            <option value="showfullcolortest">@Localizer["ShowFullcolortest"]</option>
            <option value="showclock">@Localizer["ShowCurrentTime"]</option>
            <option value="idlebar">@Localizer["ShowIdlebar"]</option>
            <option value="calibratefps">@Localizer["CalibrationTest"]</option>
            <option value="calibratebrightness">@Localizer["BrightnessTest"]</option>
            <option value="reload">@Localizer["ReloadDisplaySettings"]</option>
            <option value=""></option>
            <option value="">@Localizer["DANGERZONE"]</option>
            <option value="restartsoft">@Localizer["RestartDisplayService"]</option>
            <option value="restarthard">@Localizer["RestartHardware"]</option>
            <option value="shutdown">@Localizer["ShutdownHardware"]</option>
        </InputSelect>
        <button class="btn btn-primary" type="submit">@Localizer["SendCommand"]</button>
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; } = "";

    private readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();
    private List<DtoDeviceSetting>? DeviceSettingList;
    private DtoDevice Device { get; set; } = new DtoDevice("", "", "", "");
    private DtoDeviceSetting NewSetting = new DtoDeviceSetting("", "", "");
    private string selectedDeviceCommand = "";

    protected override async Task OnInitializedAsync()
    {
        var dev = await Api.GetDeviceAsync();
        if (dev == null)
        {
            Logger.Error("No devices found.");
            return;
        }
        Device = dev.SingleOrDefault(x => x.DeviceId == Id) ?? new DtoDevice("","","","");
        
        if (Device == null || Device.DeviceId == "")
        {
            Logger.Error("No device with ID {0} found.", Id);
            return;
        }

        DeviceSettingList = await Api.GetDeviceSettingsAsync(Id);
        NewSetting = new DtoDeviceSetting(Id, "", "");
    }

    private async void SaveSettings()
    {
        if (DeviceSettingList == null) 
        {
            Logger.Warn("Not devicesettings to save.");
            await JSRuntime.InvokeVoidAsync("alert", "No DeviceSettings to save.");
            return;
        }

        // Get the current serversettings to check which settings changed
        var currentServerSettings = await Api.GetDeviceSettingsAsync(Id);
        if (currentServerSettings == null)
        {
            Logger.Error("Cannot get current device settings from server");
            await JSRuntime.InvokeVoidAsync("alert", "Cannot get current device settings from server.");
            return;
        }

        // Update all changed settings
        foreach(var aServerSet in currentServerSettings)
        {
            var locSet = DeviceSettingList.SingleOrDefault(x => x.Name == aServerSet.Name);

            Logger.Debug("Check changed setting {0} to value {1}", locSet == null ? "NULL" : locSet.Name, locSet == null ? "NULL" : locSet.Value);

            if (locSet == null)
                continue;

            if (locSet.Value != aServerSet.Value)
            {
                Logger.Debug("Save setting {0} to value {1}", locSet.Name, locSet.Value);
                await Api.SetDeviceSettingAsync(Id, locSet);
            }
        }

        //Reload Device settings
        DeviceSettingList = await Api.GetDeviceSettingsAsync(Id);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void SaveNewSetting()
    {
        await Api.SetDeviceSettingAsync(Id, NewSetting);

        DeviceSettingList = await Api.GetDeviceSettingsAsync(Id);
        NewSetting = new DtoDeviceSetting(Id, "", "");

        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void ExecuteDeviceCommand()
    {
        if (string.IsNullOrWhiteSpace(selectedDeviceCommand))
            return;

        await Api.SetDeviceCommand(Id, selectedDeviceCommand, "");
        selectedDeviceCommand = "";

        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void SaveProperties()
    {
        await Api.SetDevice(Device);
    }
}
