@page "/matchcontrol"
@page "/matchcontrol/{SelectedMatchId:int}"
@inject LeDi.Shared.Api Api
@inject NavigationManager NavigationManager
@using LeDi.Shared
@using LeDi.Shared.DtoModel
@using LeDi.Shared.Enum

<PageTitle>LeDi - Referee Match</PageTitle>
@if (MatchList == null && SelectedMatchId == null)
{
    <p><em>Loading Matches...</em></p>
}
else if (SelectedMatchId == null && MatchList != null && MatchList.Count == 0)
{
    <p><em>Currently no matches running.</em></p>
}
else if (SelectedMatchId == null && MatchList != null)
{
    @*Select the Match to referee about*@
    <div class="container-fluid">
        @foreach(var aMatch in MatchList)
        {
            <div class="row">
                <div class="col-12">
                    @if (aMatch.MatchStatus == (int)MatchStatusEnum.Running)
                    {
                        <a class="btn btn-success fs-3" style="display:block; width:100%;" href="/matchcontrol/@aMatch.Id">@aMatch.ScheduledTime - @aMatch.Team1Name vs. @aMatch.Team2Name</a>
                    }
                    else if (aMatch.MatchStatus == (int)MatchStatusEnum.Ended)
                    {
                        <a class="btn btn-secondary fs-3" style="display:block; width:100%;" href="/matchcontrol/@aMatch.Id">@aMatch.ScheduledTime - @aMatch.Team1Name vs. @aMatch.Team2Name</a>
                    }
                    else if (aMatch.MatchStatus == (int)MatchStatusEnum.ReadyToStart)
                    {
                        <a class="btn btn-primary fs-3" style="display:block; width:100%;" href="/matchcontrol/@aMatch.Id">@aMatch.ScheduledTime - @aMatch.Team1Name vs. @aMatch.Team2Name</a>
                    }
                    else {
                        <a class="btn btn-outline-dark fs-3" style="display:block; width:100%;" href="/matchcontrol/@aMatch.Id">@aMatch.ScheduledTime - @aMatch.Team1Name vs. @aMatch.Team2Name</a>
                    }
                    <br />
                </div>
            </div>
        }    
        <a>Legend: Green = Running Match, Gray = Finished Match, Blue = Ready to Start, Other = White</a>
    </div>
}
else if (SelectedMatchId != null)
{
    @if (Match == null)
    {
        <p><em>Loading Match...</em></p>
    }
    else
    {
        <table>
            <tr>
                <th>
                    <center hidden=@Hidden>
                        <font size= "3">
                             <a>Penalty</a>
                        </font>
                    </center>
                </th>
                <th>
                    <center>
                        <font size= "5">
                             <a>Time left</a>
                        </font>
                    </center>
                </th>
                <th>
                    <center hidden=@Hidden2>
                        <font size= "3">
                             <a>Penalty</a>
                        </font>
                    </center>
                </th>
            </tr>
            <tr>
                <th>
                    <center hidden="@Hidden">
                        <font size="4">
                             @duration2
                        </font>
                    </center>
                </th>
                <th>
                    <center>
                        <font size= "7">
                             @(Match.TimeLeftSeconds / 60):@((Match.TimeLeftSeconds % 60).ToString().PadLeft(2,'0'))
                        </font>
                    </center>
                </th>
                <th>
                    <center hidden="@Hidden2">
                        <font size="4">
                             @duration3
                        </font>
                    </center>
                </th>
            </tr>@*Match time*@
            <tr>
                <th>

                </th>
                <th>
                    <button id="btnStart" class="btn btn-primary" @onclick="@StartMatch" disabled="@StartButtonDisabled" hidden="@(!PrepareHalftimeButtonDisabled || !CloseMatchButtonDisabled)">
                        Start/Continue
                    </button>
                    <button id="btnPause" class="btn btn-primary" @onclick="@PauseMatch" disabled="@PauseButtonDisabled" hidden="@(!PrepareHalftimeButtonDisabled || !CloseMatchButtonDisabled)">
                        Pause
                    </button>
                    <br />
                    <button id="btnPrepareHalftime" class="btn btn-primary" @onclick="@PrepareHalftime" disabled="@PrepareHalftimeButtonDisabled" hidden="@PrepareHalftimeButtonDisabled">
                        Prepare next halftime
                    </button>
                    <button id="btnCloseMatch" class="btn btn-primary" @onclick="@CloseMatch" disabled="@CloseMatchButtonDisabled" hidden="@CloseMatchButtonDisabled">
                        Close match
                    </button>
                </th>
                <th>

                </th>
            </tr>@*Timer Buttons*@

            <tr>
                <th>
                    <a>@Match.Team1Name</a>
                    <p role="status"> <center> <font size="7"> @Match.Team1Score </font> </center></p>
                    <button class="btn btn-primary" @onclick="@IncrementCountTeam1">
                        Score
                    </button>
                    <button class="btn btn-danger" @onclick="@DecreaseCountTeam1">
                        Revoke
                    </button>
                </th>
                <th style="text-align:center">
                    <a>Halftime:</a>
                    <br>
                    <a>@Match.HalfTimeCurrent of @Match.HalfTimeCount</a>
                </th>
                <th>
                    <a>@Match.Team2Name</a>
                    <p role="status"><center> <font size="7"> @Match.Team2Score </font> </center> </p>
                    <button class="btn btn-primary" @onclick="@IncrementCountTeam2">
                        Score
                    </button>
                    <button class="btn btn-danger" @onclick="@DecreaseCountTeam2">
                        Revoke
                    </button>
                </th>
            </tr>@*Enter goals*@

            <tr>
                <th>
                    <button class="btn btn-primary" @onclick="@Penalty2MinTeam1" >
                        2min Penalty
                    </button>
                </th>
                <th>

                </th>
                <th>
                    <button class="btn btn-primary" @onclick="@Penalty2MinTeam2" >
                        2min Penalty
                    </button>
                </th>
            </tr>

        </table>
        <br />
        <a>Match log:</a><br />
        @if(MatchEventList == null) 
        {
            <a>No match events available.</a><br />
        }
        else
        {
            <div class="container-fluid">
                <div class="row">
                    <div class="col-1">
                        <b>#</b>
                    </div>
                    <div class="col-1">
                        <b>Matchtime</b>
                    </div>
                    <div class="col-2">
                        <b>Creator</b>
                    </div>
                    <div class="col-auto">
                        <b>Note</b>
                    </div>
                </div>
         
                @foreach(var aEvent in MatchEventList.Reverse<DtoMatchEvent>())
                {
                    <div class="row justify-content-start">                    
                        <div class="col-1">
                            @aEvent.Event
                        </div>
                        <div class="col-1">
                            @(aEvent.Matchtime/60):@((aEvent.Matchtime%60).ToString().PadLeft(2,'0'))
                        </div>
                        <div class="col-2">
                            @(aEvent.Source ?? "System")
                        </div>
                        <div class="col-auto">
                            @aEvent.Text
                        </div>
                    </div>
                }
            </div>
        }
    }
}
else
{   
    <p><em>Unable to load Match or Matches...</em></p>
}


@code{

    System.Timers.Timer tmrMatchtime = new System.Timers.Timer();
    int duration2 = 15;
    int duration3 = 15;
    bool Hidden = true;
    bool Hidden2 = true;
    DtoMatch Match = new DtoMatch(); // currently selected match
    List<DtoMatchEvent>? MatchEventList = null; //List of all match events
    List<DtoMatch>? MatchList = null; // List of all not finished matches
    bool StartButtonDisabled = false; //Is the Start button disabled?
    bool PauseButtonDisabled = true; //Is the Pause button disabled?
    bool PrepareHalftimeButtonDisabled = true; //Is the Prepare Halftime button disabled?
    bool CloseMatchButtonDisabled = true; //The close button is disabled and invisible?
    int LastKnownMatchHash = 0; // Contains a hash of all match values, that can change (except time).
    bool tmrMatchtimeElapsedRegistered = false; //Is the Elapsed Event of tmrMatchtime already registered?    

    [Parameter]
    public int? SelectedMatchId { get; set; }

    private async void IncrementCountTeam1()
    {
        await Api.SetMatchGoalAsync(Match.Id, 0, 1);
        await LoadMatch();
    }
    private async void DecreaseCountTeam1()
    {
        await Api.SetMatchGoalAsync(Match.Id, 0, -1);
        await LoadMatch();
    }

    private async void IncrementCountTeam2()
    {
        await Api.SetMatchGoalAsync(Match.Id, 1, 1);
        await LoadMatch();
    }
    private async void DecreaseCountTeam2()
    {
        await Api.SetMatchGoalAsync(Match.Id, 1, -1);
        await LoadMatch();
    }

    /// <summary>
    /// Executed when the Pause button was clicked
    /// </summary>
    private async void PauseMatch()
    {
        await Api.ControlMatchtimeAsync(Match.Id, "stop");

        // Show/hide buttons
        StartButtonDisabled = false;
        PauseButtonDisabled = true;

        await LoadMatchEvents();
    }

    /// <summary>
    /// Executed when the Start button was clicked
    /// </summary>
    private async void StartMatch()
    {
        // Show/hide buttons
        StartButtonDisabled = true;
        PauseButtonDisabled = false;

        // Update match object to the current status
        Match = await Api.GetMatchAsync(Match.Id) ?? Match;

        // Set the LastKnownMatchHash to the current status
        var matchCore = await Api.GetMatchCoreAsync(Match.Id);
        if (matchCore == null)
        {
            Console.WriteLine("Failed to get MatchCore");
            return;
        }
        LastKnownMatchHash = matchCore.PropertyHash;

        // Send start to the server
        await Api.ControlMatchtimeAsync(Match.Id, "start");

        // Fix the first second gap. It is just a local visual thing.
        if (Match.TimeLeftSeconds > 0)
            Match.TimeLeftSeconds--;

        // Reload match details
        await LoadMatch();
    }


    private async void Penalty2MinTeam1()
    {
        duration2 = 15;
        tmrMatchtime.Interval = 1000;
        tmrMatchtime.Elapsed += PenaltyTimerTeam1;
        Hidden = false;
        await LoadMatch();
    }
    private async void Penalty2MinTeam2()
    {
        duration3 = 15;
        tmrMatchtime.Interval = 1000;
        tmrMatchtime.Elapsed += PenaltyTimerTeam2;
        Hidden2 = false;
        await LoadMatch();
    }

    private async void tmrMatchtime_Elapsed(object? sender, EventArgs e)
    {
        // Only run if a match was selected
        if (SelectedMatchId == null || SelectedMatchId == 0)
            return;

        // Get the time left and the hash of all match properties
        var matchCore = await Api.GetMatchCoreAsync(Match.Id);

        // If the core value query failed, cancel.
        if (matchCore == null) {
            Console.WriteLine("Failed to get MatchCore");
            return;
        }

        // Update match object in case the hash is different
        if (LastKnownMatchHash != matchCore.PropertyHash)
        {
            Console.WriteLine("New Hash is different. Refreshing all Match infos...");
            var newMatchInfo = await Api.GetMatchAsync(Match.Id);
            if (newMatchInfo != null) {
                Console.WriteLine("Updated Match infos.");
                Match = newMatchInfo;
                LastKnownMatchHash = matchCore.PropertyHash;
            }            
            await LoadMatchEvents();
        }

        // If local timer says, time is over check verify before stopping
        if (Match.TimeLeftSeconds == 0)
        {
            // Set the current time left to the server data
            Match.TimeLeftSeconds = matchCore.TimeLeftSeconds;

            // Stop Timer only if the Server based timer is done.
            if (Match.TimeLeftSeconds == 0)
            {
                tmrMatchtime.Stop();
                PauseButtonDisabled = true;

                // If this is not the last halftime, show the start button to start the next halftime
                if (Match.HalfTimeCurrent != Match.HalfTimeCount)
                {
                    StartButtonDisabled = false;
                    PrepareHalftimeButtonDisabled = false;
                    CloseMatchButtonDisabled = true;
                }
                else
                {
                    StartButtonDisabled = true;
                    PrepareHalftimeButtonDisabled = true;
                    CloseMatchButtonDisabled = false;
                }

                await LoadMatchEvents();
            }
        }
        else // update local timer
        {
            //To count the seconds more smoothly, only correct the seconds, if the diff is more than 1 second
            var serverTimeLeft = matchCore.TimeLeftSeconds;
            if (Match.TimeLeftSeconds - serverTimeLeft > 1 ||
                Match.TimeLeftSeconds - serverTimeLeft < 1)
            {
                Match.TimeLeftSeconds = serverTimeLeft;
            }
            else if (Match.TimeLeftSeconds > 0)
            {                
                Match.TimeLeftSeconds--;
            }
        }
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void PenaltyTimerTeam1(object? sender, EventArgs e)
    {
        if (duration2 == 0)
        {
            Hidden = true;
        }
        else if(duration2 > 0)
        {
            duration2--;
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    private async void PenaltyTimerTeam2(object? sender, EventArgs e)
    {
        if (duration3 == 0)
        {
            Hidden2 = true;
        }
        else if(duration3 > 0)
        {
            duration3--;
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadMatch();

        if (!tmrMatchtime.Enabled)
            tmrMatchtime.Start();

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {

        if (SelectedMatchId == null)
        {
            var matchList = await Api.GetMatchListAsync();
            if (matchList.Count == 0)
            {
                //Create emtpy list
                MatchList = new List<DtoMatch>();
                return;
            }
            MatchList = matchList.Where(x => x.MatchStatus != (int)MatchStatusEnum.Undefined && x.MatchStatus != (int)MatchStatusEnum.Canceled && x.MatchStatus != (int)MatchStatusEnum.Closed).ToList() ?? new List<DtoMatch>();
        }
        else
        {
            await LoadMatch();
        }

        // Needs to be initialized at the load of the page to also show running matches
        if (tmrMatchtimeElapsedRegistered == false)
        {
            tmrMatchtime.Interval = 1000;
            tmrMatchtime.Elapsed += tmrMatchtime_Elapsed;
            tmrMatchtimeElapsedRegistered = true;
        }

        tmrMatchtime.Start();
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async Task LoadMatch()
    {
        if (SelectedMatchId == null)
            return;

        Match = (await Api.GetMatchAsync(SelectedMatchId.Value)) ?? new DtoMatch() { Id = 0 };
        if (Match.Id == 0)
            return;

        if (Match.MatchStatus >= (int)LeDi.Shared.Enum.MatchStatusEnum.Running)
        {
            StartButtonDisabled = true;            
            PauseButtonDisabled = false;
        }
        else
        {
            StartButtonDisabled = false;
            PauseButtonDisabled = true;
        }

        // Update the Match Events
        await LoadMatchEvents();

        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async Task LoadMatchEvents()
    {
        if (SelectedMatchId == null)
            return;

        MatchEventList = await Api.GetMatchEvents(SelectedMatchId.Value);

        await InvokeAsync(() => { StateHasChanged(); });
    }

    /// <summary>
    /// Executed, when the prepare halftime button is clicked.
    /// </summary>
    private async Task PrepareHalftime()
    {
        if (Match == null)
            return;

        if (SelectedMatchId == null)
            return;

        // only if the current halftime is over
        if (Match.TimeLeftSeconds != 0)
        {
            PrepareHalftimeButtonDisabled = true;
            return;
        }

        //Check if there is another halftime
        if (Match.HalfTimeCurrent < Match.HalfTimeCount)
        {
            PrepareHalftimeButtonDisabled = true;

            await Api.SetMatchHalftimeNext(SelectedMatchId.Value);
            await LoadMatch();

            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    /// <summary>
    /// Executed when the close button is clicked
    /// </summary>
    private async Task CloseMatch()
    {
        if (Match == null)
            return;

        if (SelectedMatchId == null)
            return;

        // The last halftime must be over
        if (Match.HalfTimeCurrent != Match.HalfTimeCount && Match.TimeLeftSeconds == 0)
            return;

        await Api.SetMatchStatusAsync(Match.Id, (int)MatchStatusEnum.Closed);
        CloseMatchButtonDisabled = true;

        // Go back to the match control page
        SelectedMatchId = null;
        MatchList = null;
        NavigationManager.NavigateTo("matchcontrol");
    }
}