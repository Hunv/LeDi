@page "/settingsdevicedelete/{id}"
@using LeDi.Shared.DtoModel;
@using LeDi.WebClient.Data
@inject LeDi.Shared.Api Api
@inject NavigationManager NavigationManager
@inject Microsoft.Extensions.Localization.IStringLocalizer<SettingsDeviceDelete> Localizer

<PageTitle>LeDi - @Localizer["ConfirmDeletionDevice"]</PageTitle>


<h1>@Localizer["ConfirmDeletionDevice"]</h1>

@if (ToDeleteDevice == null)
{
    <p><em>@Localizer["LoadingDevice"]</em></p>
}
else
{
    <p>@Localizer["ConfirmTheDeletionDevice"]@Id:</p>
    <EditForm Model="@ToDeleteDevice" OnValidSubmit="@ConfirmDelete">

        <button class="btn btn-warning" type="submit">@Localizer["ConfirmDelete"]</button>
        <button class="btn btn-danger" type="button" @onclick="CancelDelete">@Localizer["CancelDelete"]</button>
    </EditForm>
}
}

@code {
    [Parameter]
    public string Id { get; set; } = "";

    private readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();
    private DtoDevice ToDeleteDevice = new DtoDevice("", "", "", "");

    protected override async Task OnInitializedAsync()
    {
        var devices = await Api.GetDeviceAsync();
        if (devices == null || devices.Count == 0)
            return;

        ToDeleteDevice = devices.SingleOrDefault(x => x.DeviceId == Id) ?? new DtoDevice("","","", "");
    }

    private void CancelDelete()
    {
        Logger.Trace("Cancel clicked.");
        NavigationManager.NavigateTo("/settings");
    }

    private async void ConfirmDelete()
    {
        Logger.Trace("Confirm clicked");
        await Api.DeleteDeviceAsync(Id);

        NavigationManager.NavigateTo("/settings");
        //await Api.AddMatchAsync(new DtoMatch());

    }
}
