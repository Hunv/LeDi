@page "/Matchcontrol"
@inject Tiwaz.Shared.Api Api
@using Tiwaz.Shared.DtoModel

<PageTitle>Referee Match</PageTitle>
@if (match == null)
{
    <p><em>Loading Data...</em></p>
}
else
{
    <table>
        <tr>
            <th>
                <center hidden=@Hidden>
                    <font size= "3">
                         <a>Penalty</a>
                    </font>
                </center>
            </th>
            <th>
                <center>
                    <font size= "5">
                         <a>Time</a>
                    </font>
                </center>
            </th>
            <th>
                <center hidden=@Hidden2>
                    <font size= "3">
                         <a>Penalty</a>
                    </font>
                </center>
            </th>
        </tr>
        <tr>
            <th>
                <center hidden="@Hidden">
                    <font size="4">
                         @duration2
                    </font>
                </center>
            </th>
            <th>
                <center>
                    <font size= "7">
                         @(match.TimeLeftSeconds / 60):@(((match.TimeLeftSeconds % 60) ?? 0).ToString().PadLeft(2,'0'))
                    </font>
                </center>
            </th>
            <th>
                <center hidden="@Hidden2">
                    <font size="4">
                         @duration3
                    </font>
                </center>
            </th>
        </tr>@*Match time*@
        <tr>
            <th>

            </th>
            <th>
                <button class="btn btn-primary" @onclick="@StartMatch" disabled="@StartButtonDisabled">
                    Start
                </button>
                <button class="btn btn-primary" @onclick="@PauseMatch">
                    Pause
                </button>
                <button class="btn btn-primary" @onclick="@ResumeMatch">
                    Resume
                </button>
            </th>
            <th>

            </th>
        </tr>@*Timer Buttons*@
    
        <tr>
            <th>
                <a>@match.Team1Name</a>
                <p role="status"> <center> <font size="7"> @CountTeam1 </font> </center></p>
                <button class="btn btn-primary" @onclick="@IncrementCountTeam1">
                    Score
                </button>
                <button class="btn btn-danger" @onclick="@DecreaseCountTeam1">
                    Revoke
                </button>
            </th>
            <th>

            </th>
            <th>
                <a>@match.Team2Name</a>
                <p role="status"><center> <font size="7"> @CountTeam2 </font> </center> </p>
                <button class="btn btn-primary" @onclick="@IncrementCountTeam2">
                    Score
                </button>
                <button class="btn btn-danger" @onclick="@DecreaseCountTeam2">
                    Revoke
                </button>
            </th>
        </tr>@*Enter goals*@

        <tr>
            <th>
                <button class="btn btn-primary" @onclick="@Penalty2MinTeam1" >
                    2min Penalty
                </button>
            </th>
            <th>

            </th>
            <th>
                <button class="btn btn-primary" @onclick="@Penalty2MinTeam2" >
                    2min Penalty
                </button>
            </th>
        </tr>

    </table>
}


@code{

    System.Timers.Timer tmrMatchtime = new System.Timers.Timer();
    int duration2 = 15;
    int duration3 = 15;
    int CountTeam1 = 0;
    int CountTeam2 = 0;
    bool Hidden = true;
    bool Hidden2 = true;
    DtoMatch match = new DtoMatch();
    bool StartButtonDisabled = false;

    private void IncrementCountTeam1()
    {
        CountTeam1++;
    }
    private void DecreaseCountTeam1()
    {
        CountTeam1--;
    }

    private void IncrementCountTeam2()
    {
        CountTeam2++;
    }
    private void DecreaseCountTeam2()
    {
        CountTeam2--;
    }

    private async void PauseMatch()
    {
        await Api.ControlMatchtimeAsync(match.Id, "pause");
    }
    private async void ResumeMatch()
    {
        await Api.ControlMatchtimeAsync(match.Id, "resume");
    }
    private async void StartMatch()
    {
        StartButtonDisabled = true;
        await Api.ControlMatchtimeAsync(match.Id, "start");
    }
    private void Penalty2MinTeam1()
    {
        duration2 = 15;
        tmrMatchtime.Interval = 1000;
        tmrMatchtime.Elapsed += count_downTeam1;
        Hidden = false;
    }
    private void Penalty2MinTeam2()
    {
        duration3 = 15;
        tmrMatchtime.Interval = 1000;
        tmrMatchtime.Elapsed += count_downTeam2;
        Hidden2 = false;
    }

    private async void tmrMatchtime_Elapsed(object? sender, EventArgs e)
    {
        // If local timer says, time is over check verify before stopping
        if (match.TimeLeftSeconds == 0)
        {            
            match.TimeLeftSeconds = await Api.GetMatchTimeAsync(match.Id);

            // Stop Timer only if the Server based timer is done.
            if (match.TimeLeftSeconds == 0)
                tmrMatchtime.Stop();
        }
        else // update local timer
        {
            //To count the seconds more smoothly, only correct the seconds, if the diff is more than 1 second
            var serverTimeLeft = await Api.GetMatchTimeAsync(match.Id);
            if (match.TimeLeftSeconds - serverTimeLeft > 1 ||
                match.TimeLeftSeconds - serverTimeLeft < 1)
            {
                match.TimeLeftSeconds = serverTimeLeft;
            }
            else
            {
                match.TimeLeftSeconds--;
            }
        }
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void count_downTeam1(object? sender, EventArgs e)
    {
        if (duration2 == 0)
        {
            Hidden = true;
        }
        else if(duration2 > 0)
        {
            duration2--;
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    private async void count_downTeam2(object? sender, EventArgs e)
    {
        if (duration3 == 0)
        {
            Hidden2 = true;
        }
        else if(duration3 > 0)
        {
            duration3--;
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var matchList= await Api.GetMatchListAsync();
        if (matchList.Count == 0)
            return;

        match = matchList[matchList.Count-1];

        if (match.MatchStatus >= 2)
        {
            StartButtonDisabled = true;
        }

        // Needs to be initialized at the load of the page to also show running matches
        tmrMatchtime.Interval = 1000;
        tmrMatchtime.Elapsed += tmrMatchtime_Elapsed;   

        tmrMatchtime.Start();
        await InvokeAsync(() => { StateHasChanged(); });
    }
}