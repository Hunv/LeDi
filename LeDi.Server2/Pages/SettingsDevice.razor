@page "/settingsdevice/{id}"
@using LeDi.Server2.Data
@using LeDi.Server2.DatabaseModel;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject Microsoft.Extensions.Localization.IStringLocalizer<SettingsDevice> Localizer

<PageTitle>LeDi - @Localizer["DeviceSettings"]</PageTitle>


<h1>@Localizer["DeviceSettings"]</h1>

@if (DeviceSettingList == null || Device == null)
{
    <p><em>@Localizer["LoadingDeviceSettings"]</em></p>
}
else
{
    <AuthorizeView Roles="Att-CanDeviceManage,Att-CanDeviceCommands">
        <Authorized>
            <p>@Localizer["PropertiesSetForDevice"]@Device.DeviceName (@Id):</p>
            <EditForm Model="@Device" OnValidSubmit="@SaveProperties" Context="x">
                @*<DataAnnotationsValidator />
                <ValidationSummary />*@

                <table class="table">
                    <thead>
                        <tr>
                            <th>@Localizer["Property"]</th>
                            <th>@Localizer["Value"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <a>@Localizer["DeviceName"]</a>
                            </td>
                            <td>
                                <InputText type="text" class="form-control" @bind-Value="Device.DeviceName" />                        
                                @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <a>@Localizer["DeviceModel"]</a>
                            </td>
                            <td>
                                <InputText type="text" class="form-control" @bind-Value="Device.DeviceModel" />                        
                                @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <a>@Localizer["DeviceType"]</a>
                            </td>
                            <td>
                                <InputText type="text" class="form-control" @bind-Value="Device.DeviceType" />                        
                                @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <a>@Localizer["Enabled"]</a>
                            </td>
                            <td>
                                <InputCheckbox @bind-Value="Device.Enabled" />                        
                                @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <a>@Localizer["Default"]</a>
                            </td>
                            <td>
                                <InputCheckbox @bind-Value="Device.Default" />                        
                                @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                            </td>
                        </tr>
                    </tbody>
                </table>

                <button class="btn btn-primary" type="submit">@Localizer["SaveProperties"]</button>
            </EditForm>
            <br /><br />

            <p>@Localizer["SettingsConfiguredForDevice"]@Device.DeviceName (@Id):</p>
            <EditForm Model="@DeviceSettingList" OnValidSubmit="@SaveSettings" Context="x">
                @*<DataAnnotationsValidator />
                <ValidationSummary />*@

                <table class="table">
                    <thead>
                        <tr>
                            <th>@Localizer["Setting"]</th>
                            <th>@Localizer["Value"]</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var aSetting in DeviceSettingList)
                        {
                            <tr>
                                <td>
                                    <a>@aSetting.SettingName</a>
                                    @*<InputText id="txtSetting@aSetting.Name" type="text" class="form-control" @bind-Value="@aSetting.Name" />*@
                                    @*<ValidationMessage For="@(() => aSetting.Name)" />*@
                                </td>
                                <td>
                                    <InputText type="text" class="form-control" @bind-Value="@aSetting.SettingValue" />
                                    @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                                </td>
                                <td>
                                    <a href="/SettingsDeviceSettingDelete/@Id/@aSetting.SettingName" class="text-decoration-none">🗑</a>
                                </td>
                            </tr>
                        }      
                    </tbody>
                </table>    
        
                <button class="btn btn-primary" type="submit">Save Settings</button>
            </EditForm>
            <br /><br />
            <h3>@Localizer["AddNewSetting"]</h3>
            <EditForm Model="@NewSetting" OnValidSubmit="@SaveNewSetting" Context="x">
                @*<DataAnnotationsValidator />
                <ValidationSummary />*@

                <a>@Localizer["SettingName"]</a>
                <InputText id="txtNewSettingName" type="text" class="form-control" @bind-Value="@NewSetting.SettingName" />
                @*<ValidationMessage For="@(() => aSetting.Name)" />*@
                <br />

                <a>@Localizer["SettingValue"]</a>
                <InputText id="txtNewSettingValue" type="text" class="form-control" @bind-Value="@NewSetting.SettingValue" />
                @*<ValidationMessage For="@(() => aSetting.Value)" />*@
                <br />
        
                <button class="btn btn-primary" type="submit">Add Setting</button>
            </EditForm>
            <br /><br />
            <h3>@Localizer["SendCommandDevice"]</h3>
            <EditForm Model="@selectedDeviceCommand" OnValidSubmit="@ExecuteDeviceCommand" Context="x">
                <InputSelect @bind-Value="selectedDeviceCommand" class="form-control">
                    <option value="showareas">@Localizer["ShowAreas"]</option>
                    <option value="showtestpattern">@Localizer["ShowTestpattern"]</option>
                    <option value="showcolortest">@Localizer["ShowColortest"]</option>
                    <option value="showfullcolortest">@Localizer["ShowFullcolortest"]</option>
                    <option value="showclock">@Localizer["ShowCurrentTime"]</option>
                    <option value="idlebar">@Localizer["ShowIdlebar"]</option>
                    <option value="calibratefps">@Localizer["CalibrationTest"]</option>
                    <option value="calibratebrightness">@Localizer["BrightnessTest"]</option>
                    <option value="reload">@Localizer["ReloadDisplaySettings"]</option>
                    <option value=""></option>
                    <option value="">@Localizer["DANGERZONE"]</option>
                    <option value="restartsoft">@Localizer["RestartDisplayService"]</option>
                    <option value="restarthard">@Localizer["RestartHardware"]</option>
                    <option value="shutdown">@Localizer["ShutdownHardware"]</option>
                </InputSelect>
                <button class="btn btn-primary" type="submit">@Localizer["SendCommand"]</button>
            </EditForm>
        </Authorized>
        <NotAuthorized>
            <p>@Localizer["NoPermissions"]</p>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter]
    public string Id { get; set; } = "";

    private readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();
    private List<TblDeviceSetting>? DeviceSettingList;
    private TblDevice? Device { get; set; }
    private TblDeviceSetting NewSetting = new TblDeviceSetting("", "", "");
    private string selectedDeviceCommand = "";


    protected override async Task OnInitializedAsync()
    {
        Device = await DataHandler.GetDeviceAsync(Id);

        if (Device == null || Device.DeviceId == "")
        {
            Logger.Error("No device with ID {0} found.", Id);
            return;
        }

        DeviceSettingList = await DataHandler.GetDeviceSettingListAsync(Id);
        NewSetting = new TblDeviceSetting(Id, "", "");
    }

    private async void SaveSettings()
    {
        if (DeviceSettingList == null) 
        {
            Logger.Warn("Not devicesettings to save.");
            await JSRuntime.InvokeVoidAsync("alert", "No DeviceSettings to save.");
            return;
        }

        // Get the current serversettings to check which settings changed
        var currentServerSettings = await DataHandler.GetDeviceSettingListAsync(Id);
        if (currentServerSettings == null)
        {
            Logger.Error("Cannot get current device settings from server");
            await JSRuntime.InvokeVoidAsync("alert", "Cannot get current device settings from server.");
            return;
        }

        // Update all changed settings
        foreach(var aServerSet in currentServerSettings)
        {
            var locSet = DeviceSettingList.SingleOrDefault(x => x.SettingName == aServerSet.SettingName);

            Logger.Debug("Check changed setting {0} to value {1}", locSet == null ? "NULL" : locSet.SettingName, locSet == null ? "NULL" : locSet.SettingValue);

            if (locSet == null)
                continue;

            if (locSet.SettingValue != aServerSet.SettingValue)
            {
                Logger.Debug("Save setting {0} to value {1}", locSet.SettingName, locSet.SettingValue);

                await DataHandler.SetDeviceSettingAsync(Id, locSet.SettingName, locSet.SettingValue);
            }
        }

        //Reload Device settings
        DeviceSettingList = await DataHandler.GetDeviceSettingListAsync(Id);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void SaveNewSetting()
    {
        await DataHandler.SetDeviceSettingAsync(Id, NewSetting.SettingName, NewSetting.SettingValue);

        DeviceSettingList = await DataHandler.GetDeviceSettingListAsync(Id);
        NewSetting = new TblDeviceSetting(Id, "", "");

        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void ExecuteDeviceCommand()
    {
        if (string.IsNullOrWhiteSpace(selectedDeviceCommand))
            return;

        throw new Exception("Needs to be implemented a way, that it is directly send to the device");
        //await Api.SetDeviceCommand(Id, selectedDeviceCommand, "");
        //selectedDeviceCommand = "";

        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void SaveProperties()
    {
        if (Device == null)
            return;

        var dev = await DataHandler.GetDeviceAsync(Device.DeviceId);
        if (dev != null)
        {
            dev.DeviceName = Device.DeviceName;
            dev.DeviceModel = Device.DeviceModel;
            dev.DeviceType = Device.DeviceType;
            dev.Enabled = Device.Enabled;
            dev.Default = Device.Default;
        }
    }
}
