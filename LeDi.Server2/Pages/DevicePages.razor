@page "/devicepages"
@using LeDi.Server2.DatabaseModel;
@using LeDi.Server2.Enum
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.Extensions.Localization.IStringLocalizer<DevicePages> Localizer

<PageTitle>LeDi - @Localizer["PageTitle"]</PageTitle>

@if (DeviceList == null)
{
    <p><em>@Localizer["Loading"]</em></p>
}
else
{
    <AuthorizeView Roles="Att-CanDeviceManage,Att-IsAdmin">
        <Authorized>
            <EditForm Model="@SelectedDevice" OnValidSubmit="@ShowPage" Context="x">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <p>@Localizer["SelectDevice"]</p>
                <InputSelect class="form-control" @bind-Value="SelectedDevice">
                    @foreach(var aDevice in DeviceList)
                    {
                        var dev = aDevice;
                        <option value="@dev.DeviceId">@dev.DeviceName</option>
                    }    
                </InputSelect>
                <br /><br />

                <p>@Localizer["SelectPage"]</p>
                <InputSelect class="form-control" @bind-Value="SelectedPage" @onselectionchange="SelectedPageChanged">
                    <option value=""></option>
                    <option value="match">@Localizer["Match"]</option>
                    <option value="tournament">@Localizer["Tournament"]</option>
                    <option value="countdown">@Localizer["Countdown"]</option>
                    <option value="text">@Localizer["Text"]</option>
                </InputSelect>
    
                <br /><br />

                <div hidden="@(!(SelectedPage == ""))">
                </div>

                <div hidden="@(!(SelectedPage == "match"))">
                    <p>@Localizer["SelectMatch"]</p>
                    <p>@Localizer["SelectMatch2"]</p>
                    @if(MatchList == null || MatchList.Count == 0)
                    {
                        <p><em>@Localizer["NoMatches"]</em></p>
                    }
                    else
                    {
                        <InputSelect class="form-control" @bind-Value="SelectedMatchId">
                            @foreach(var aMatch in MatchList)
                            {
                                <option value="@aMatch.Id">@aMatch.Team1Name - @aMatch.Team2Name (@aMatch.Team1Score:@aMatch.Team2Score)</option>
                            }
                        </InputSelect>
                    }
                </div>

                <div hidden="@(!(SelectedPage == "tournament"))">
                    <p>@Localizer["TournamentText"]</p>
                </div>

                <div hidden="@(!(SelectedPage == "countdown"))">
                    <p>@Localizer["CountdownText"]</p>

                    <p>@Localizer["CountdownText2"]</p>
                    <InputText class="form-control" @bind-Value="CountdownText"/>

                    <p>@Localizer["CountdownSeconds"]</p>
                    <input 
                        type="number" 
                        class="form-control"
                        placeholder="@Localizer["Seconds"]"
                        min="0" 
                        max="99999" 
                        @bind-value="CountdownSeconds"
                        />
                </div>

                <div hidden="@(!(SelectedPage == "text"))">
                    <p>@Localizer["TextText"]</p>
                    <InputTextArea class="form-control" @bind-Value="TextContent"/>
                </div>

                <button class="btn btn-primary" type="submit">Show Page</button>
            </EditForm>
        </Authorized>
        <NotAuthorized>
            <p>@Localizer["NoPermissions"]</p>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    private List<TblDevice>? DeviceList = null;
    private string SelectedDevice = "";
    private List<TblMatch> MatchList = new List<TblMatch>();
    private TblMatch SelectedMatch = new TblMatch();
    private string CountdownText = "";
    private int CountdownSeconds = 0;
    private string TextContent = "";


    private string _SelectedPage = "";
    private string SelectedPage {
        get
        {
            return _SelectedPage;
        }
        set
        {
            _SelectedPage = value;
            #pragma warning disable CS4014
            SelectedPageChanged();
            #pragma warning restore CS4014
        }
    }

    private int SelectedMatchId
    {
        get
        {
            return SelectedMatch.Id;
        }
        set
        {
            SelectedMatch = MatchList.Single(x => x.Id == value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        DeviceList = await DataHandler.GetDeviceListAsync();
    }

    private async Task SelectedPageChanged()
    {
        switch (SelectedPage)
        {
            case "match":
                MatchList = DataHandler.GetMatchList().Where(x => x.MatchStatus != (int)MatchStatusEnum.Canceled && x.MatchStatus != (int)MatchStatusEnum.Closed && x.MatchStatus != (int)MatchStatusEnum.Ended && x.MatchStatus != (int)MatchStatusEnum.Stopped).ToList();
                break;
        }

        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async Task ShowPage()
    {
        var set = DataHandler.GetDeviceSettingAsync(SelectedDevice, "mode");
        switch (SelectedPage)
        {
            case "":
                await DataHandler.SetDeviceSettingAsync(SelectedDevice, "mode", "none");
                break;

            case "match":
                await DataHandler.SetDeviceSettingAsync(SelectedDevice, "mode", "match");
                break;

            case "tournament":
                await DataHandler.SetDeviceSettingAsync(SelectedDevice, "mode", "tournament");
                break;

            case "countdown":
                await DataHandler.SetDeviceSettingAsync(SelectedDevice, "showcountdown", CountdownSeconds.ToString());
                break;

            case "text":
                await DataHandler.SetDeviceSettingAsync(SelectedDevice, "showtext", TextContent);
                break;
        }
    }
}
