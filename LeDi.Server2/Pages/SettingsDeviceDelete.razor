@page "/settingsdevicedelete/{id}"
@using LeDi.Server2.Data
@using LeDi.Server2.DatabaseModel;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Microsoft.Extensions.Localization.IStringLocalizer<SettingsDeviceDelete> Localizer

<PageTitle>LeDi - @Localizer["ConfirmDeletionDevice"]</PageTitle>


<h1>@Localizer["ConfirmDeletionDevice"]</h1>

@if (ToDeleteDevice == null || AuthenticatedUserRole == null)
{
    <p><em>@Localizer["LoadingDevice"]</em></p>
}
else
{
    <AuthorizeView>
        <Authorized>
            @if (AuthenticatedUserRole.CanDeviceManage)
            {
                <p>@Localizer["ConfirmTheDeletionDevice"]@Id:</p>
                <EditForm Model="@ToDeleteDevice" OnValidSubmit="@ConfirmDelete" Context="x">

                    <button class="btn btn-warning" type="submit">@Localizer["ConfirmDelete"]</button>
                    <button class="btn btn-danger" type="button" @onclick="CancelDelete">@Localizer["CancelDelete"]</button>
                </EditForm>
            }
            else
            {
                <p>@Localizer["NoPermissions"]</p>
            }
        </Authorized>
        <NotAuthorized>
            <p>@Localizer["NotLoggedIn"]</p>
        </NotAuthorized>
    </AuthorizeView>
}
}

@code {
    [Parameter]
    public string Id { get; set; } = "";

    private readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();
    private TblDevice? ToDeleteDevice;

    /// <summary>
    /// Contains the roles a user has
    /// </summary>
    private TblUserRole? AuthenticatedUserRole { get; set; }


    protected override async Task OnInitializedAsync()
    {
        // Get the roles of the currently logged in user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState != null && authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
        {
            // Get the Roles from Identity management. Should only be one always.
            var username = authState.User.Identity.Name;
            if (username != null)
            {
                var roles = await _UserManager.GetRolesAsync(await _UserManager.FindByNameAsync(username));

                if (roles != null && roles.Count >= 1)
                {
                    AuthenticatedUserRole = await DataHandler.GetUserRoleAsync(roles[0]);
                }
            }
        }
        else
        {
            AuthenticatedUserRole = await DataHandler.GetUserRoleAsync("Guests");
        }

        ToDeleteDevice = await DataHandler.GetDeviceAsync(Id);
    }

    private void CancelDelete()
    {
        Logger.Trace("Cancel clicked.");
        NavigationManager.NavigateTo("/settings");
    }

    private async void ConfirmDelete()
    {
        Logger.Trace("Confirm clicked");
        if (ToDeleteDevice != null)
        {
            if (!(await DataHandler.RemoveDeviceAsync(ToDeleteDevice.DeviceId)))
            {
                Logger.Error("Failed to delete device {0}", ToDeleteDevice.DeviceId);
            }
        }

        NavigationManager.NavigateTo("/settings");
    }
}
